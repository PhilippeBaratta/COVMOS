#catalogue settings

#total_number_of_cat is the total number of catalogues that you want to simulate
#rho_0 is the expected density of particles per unit volume, in (Mpc/h)^{-3}
#interp_sheme refers to the way particles are distributed in grid cells. Two options are available : 'tophat' (incompatible with velocity = True) or 'trilinear'. the 'trilinear' option ensure field continuity but is more cpu-consuming
#fixed_Rdm_seed allows to fix to deterministic values the stochastic Gaussian density field. If you don't know, set it to False
#L is the cubical box size in Mpc/h
#N_sample is the regularily spaced grid parameter, must be a power of 2 (like 256, 512, 1024, etc) for the FFTs to be computationnaly effectives
#redshift is the redshift of the snapshots that will be simulated

total_number_of_cat = 50
rho_0               = 0.1
interp_sheme        = 'trilinear'
fixed_Rdm_seed      = False
L                   = 1000.
N_sample            = 1024 
redshift            = 0.

#target statistics

#Pk_dd_file is the path to the ascii file storing two columns: k in h/Mpc and Pk_delta_delta in [Mpc/h]^3. If you want classy to compute it, leave this variable empty and return non-zero values for the classy parameters below. If you want NBodyKit to estimate the Pk on your own data, you can use compute_monop_using_NBK.py
#Pk_tt_file is the path to the ascii file storing two columns: k in h/Mpc and Pk_theta_theta in [Mpc/h]^3. If you want classy (combined to arxiv.org/abs/1906.07683) to compute it, leave this variable empty and return non-zero values for the classy parameters below

Pk_dd_file = './target_stat/k_Pk_density_lcdm.txt'
Pk_tt_file = './target_stat/k_Pk_theta_lcdm.txt'

#classy dictionnary parameters
#these parameters are read if Pk_dd_file is empty or if Pk_tt_file is empty (while velocity = True). It will be used to compute the matter power spectrum or Pk_cb (if massive neutrinos are provided)

classy_dict = {'h': 0.67, 'Omega_b':0.05, 'Omega_cdm':0.27, 'n_s':0.96, 'A_s':2.1265e-9, 'non linear':'halofit'}

#PDF_d_file is the path to the ascii file storing two columns: delta and the normalised PDF for the density field (make sure to provide it with high precision in delta). If you want COVMOS to estimate it from data, you can use the code compute_delta_PDF.py
#targeted_rms is the targeted one-point velocity variance (root squared) in Mpc/h. Required if velocity = True. The code compute_velocity_rms.py helps you to estimate targeted_rms on your own data
#alpha is used for assigning peculiar velocities to particles. Can be obtained by fitting the relation sigma**2 = beta (delta +1)**alpha where sigma is the squared velocity dispersion in regions defined by local density contrast delta. Required if velocity = True. The code compute_alpha.py helps you to estimate alpha on your own data

PDF_d_file    = './target_stat/delta_PDF_lcdm.txt'
targeted_rms  = 3.9873
alpha         = 0.750

#outputs

#output_dir is the directory where every files related to this .ini file will be stored
#velocity can be set to True or False if you want or not to simulate peculiar velocities
#compute_Pk_prediction and compute_2pcf_prediction to compute the prediction of the (comoving space only) power spectrum and two-point correlation function (both submitted to unavoidable grid and poisson filterings of the COVMOS method)
#estimate_Pk_multipoles uses NBodyKit in order to estimate the multipoles of the power spectrum in comoving space and in redshift space (using plane parallel approximation) if velocity = True. Three options : 'stopandrun' to pause the simulation process while estimating the power spectra, 'detached' if you want the estimation to be run in parallel of your simulations, or False if you don't want any Pk estimation
#save_catalogue is the option to keep or not the simulated catalogues (the user can choose to keep only the estimated power spectra)
#verbose print the various steps and intermediate results of the codes

output_dir              = '/datadec/cppm/baratta/COVMOS/covmos_public_test'
velocity                = True
compute_Pk_prediction   = True
compute_2pcf_prediction = True
estimate_Pk_multipoles  = 'stopandrun'
save_catalogue          = True
verbose                 = True